trigger:
- master

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-18.04'
    mac:
      imageName: 'macos-10.14'
    windows:
      imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

variables:
  buildConfiguration: 'Debug'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK 2.1.x'
  inputs:
    packageType: 'sdk'
    version: '2.1.x'
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 3.1.x'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--no-restore --configuration $(BuildConfiguration)'
- task: UsePythonVersion@0
  displayName: 'Use Python 3.7'
  name: 'GetPython'
  inputs:
    versionSpec: '3.7.x'
    addToPath: true
    architecture: 'x64'
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      Write-Host "$(GetPython.pythonLocation)"
      $interpreter = if ($IsWindows) { "python.exe" } else { "python" }
      $interpreter = Join-Path "$(GetPython.pythonLocation)" $interpreter

      Write-Host "$interpreter"

      Get-ChildItem -Recurse "$(GetPython.pythonLocation)"

      $pyEnvs = (dotnet run --project app/WhichPython.App.csproj interpreter "$interpreter") | Out-String
      if (-Not $pyEnvs.Contains("$(GetPython.pythonLocation)")) {
          Write-Host "$env:PATH"
          Write-Host "$pyEnvs"
          exit 1
      } else {
          Write-Host $pyEnvs
      }
